<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="dok1.xsl"?>
<!--  Cwiczenie 1 -->
<labs>
    <lab>
        <title> ^fwiczenie 1 - lista wszystkich student  w </title>
        <description>Do realizacji tego zadania zostanie wykorzystany dokument XSL (dok1.xsl)
            zawieraj ^ecy dwa szablony, pierwszy zostanie dopasowny do korzenia dokumentu XML,
            drugi natomiast b ^ydzie odczytywa ^b zawarto ^{ ^g w ^yz ^b  w <b>student</b>. Przetworzenie
            arkusza XSL przez procesor XSLT jest zgodne z wcze ^{niej opisanym przypadkiem.
            W wyniku transformacji XSLT zostanie utworzony dokument HTML.</description>
        <code><![CDATA[<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" version="1.0"
     indent="yes" doctype-system="about:legacy-compact" />
<!-- szablon dopasowujacy sie do korzenia dokumentu XML -->
<xsl:template match="/">
        <html>
            <head>
                <title>
                    Lista studentow na wydziale
                </title>
            </head>
            <body>
                <h1>
                    Lista studentow na wydziale
                </h1>
                <table>
                <tr><th>Imie</th><th>nazwisko</th><th>Rok</th></tr>
                <!-- wyszukiwanie wezlow student w dokumencie XML -->
                <xsl:apply-templates select="//student" />
                </table>
            </body>
        </html>
</xsl:template>
<!-- szablon dopasowujacy sie do wezla student -->
<xsl:template match="student">
  <tr>
   <td><xsl:value-of select="imie" /></td>
   <td><xsl:value-of select="nazwisko" /></td>
   <td><xsl:value-of select="rok" /></td>
  </tr>
</xsl:template>
</xsl:stylesheet>]]>
        </code>
    </lab>
    <lab>
        <title> ^fwiczenie 2 - posortowana lista student  w </title>
        <description>Do realizacji tego zadania zostanie wykorzystany dokument XSL (dok2.xsl)
            zawieraj ^ecy dwa szablony, pierwszy zostanie dopasowny do korzenia dokumentu XML,
            drugi natomiast b ^ydzie szablonem nazwanym, kt  ry b ^ydzie odczytywa ^b zawarto ^{ ^g w ^yz ^b  w
            <b>student</b>. Tak jak poprzednio wzorzec pierwszy jest dopasowany do korzenia
            dokumentu XML. W ramach szablonu wykorzystano wcze ^{niej om  wion ^e funkcjonalno ^{ ^g
            iteratora i polecenia sortuj ^ecego (polecenia &lt;xsl:for-each &gt; i &lt;xsl:sort /&gt;).
            Po znalezieniu odpowiednich w ^yz ^b  w nast ^ypuje wywo ^banie szablonu nazwanego
            <mark id="1">&lt;xsl:call-template name="nazwa" /&gt;</mark>, gdzie "nazwa"
            jest nazw ^e szablonu. W ramach szablonu zostanie pobrana zawarto ^{ ^g podelement  w
            wybranego w ^yz ^ba.</description>
        <code><![CDATA[<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" version="1.0"
     indent="yes" doctype-system="about:legacy-compact" />
<!-- szablon dopasowujacy sie do korzenia dokumentu XML -->
<xsl:template match="/">
        <html>
            <head>
                <title>
                    Lista studentow na wydziale
                </title>
            </head>
            <body>
                <h1>
                    Lista studentow na wydziale
                </h1>
                <table>
                <tr><th>Imie</th><th>nazwisko</th><th>Rok</th></tr>
                <!-- wyszukiwanie wezlow student w dokumencie XML -->
                <xsl:for-each select="//student" >
                  <xsl:sort select="nazwisko/text()" />
                  <xsl:call-template name="student" />
                </xsl:for-each>
                </table>
            </body>
        </html>
</xsl:template>
<!-- szablon dopasowujacy sie do wezla student -->
<xsl:template name="student" >
<!--xsl:template match="student" -->
  <tr>
   <td><xsl:value-of select="imie" /></td>
   <td><xsl:value-of select="nazwisko" /></td>
   <td><xsl:value-of select="rok" /></td>
  </tr>
</xsl:template>
</xsl:stylesheet>]]>
        </code>
    </lab>
    <lab>
        <title> ^fwiczenie 3 - posortowana lista student  w po roku studi  w, nazwisku i imieniu</title>
        <description>Do realizacji tego zadania zostanie wykorzystany dokument XSL (dok3.xsl)
            zawieraj ^ecy dwa szablony, pierwszy zostanie dopasowny do korzenia dokumentu XML,
            drugi natomiast b ^ydzie szablonem nazwanym, kt  ry b ^ydzie odczytywa ^b zawarto ^{ ^g w ^yz ^b  w
            <b>student</b>. Konstrukcja szablon  w jest kopi ^e  ^gwiczenia drugiego.
            Do sortowania student  w wykorzystamy jednak trzy polecenia &lt;xsl:sort /&gt; w    ^edanej
            kolejno ^{ci sortowania. W ramach polecenia <b>&lt;xsl:sort /&gt;</b> umieszczono dodatkowy
            atrybut <m>data-type</m>, kt  ry dla sortowanych warto ^{ci numerycznych przyjmuje warto ^{ ^g
            "number" a dla warto ^{ci tekstowych "text".</description>
        <code><![CDATA[<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" version="1.0"
     indent="yes" doctype-system="about:legacy-compact" />
<!-- szablon dopasowujacy sie do korzenia dokumentu XML -->
<xsl:template match="/">
        <html>
            <head>
                <title>
                    Lista studentow na wydziale
                </title>
            </head>
            <body>
                <h1>
                    Lista studentow na wydziale
                </h1>
                <table>
                <tr><th>Imie</th><th>nazwisko</th><th>Rok</th></tr>
                <!-- wyszukiwanie wezlow student w dokumencie XML -->
                <xsl:for-each select="//student" >
                  <xsl:sort select="rok/text()" data-type="number" />
                  <xsl:sort select="nazwisko/text()" data-type="text"  />
                  <xsl:sort select="imie/text()" data-type="text" />
                  <xsl:call-template name="student" />
                </xsl:for-each>
                </table>
            </body>
        </html>
</xsl:template>
<!-- szablon dopasowujacy sie do wezla student -->
<xsl:template name="student" >
<!--xsl:template match="student" -->
  <tr>
   <td><xsl:value-of select="imie" /></td>
   <td><xsl:value-of select="nazwisko" /></td>
   <td><xsl:value-of select="rok" /></td>
  </tr>
</xsl:template>
</xsl:stylesheet>]]>
        </code>
    </lab>
    <lab>
        <title> ^fwiczenie 4 - lista student  w na poszczeg  lnych kierunkach</title>
        <description>Do realiacji tego zadania zostanie wykorzystany dokument XSL (dok4.xsl)
            zawierajacy trzy szablony. Pierwszy szablon dopasowuje korze ^d dokumentu XML, drugi
            dopasowuje kolejne wydzia ^by, natomiast trzeci dopasowuje w ^yz ^by <b>student</b>.
        </description>
        <code><![CDATA[<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" version="1.0"
     indent="yes" doctype-system="about:legacy-compact" />
<xsl:template match="/">
        <html>
            <head>
                <title>
                    Lista studentow na wydziale
                </title>
            </head>
            <body>
                <h1>
                    Lista studentow na wydziale
                </h1>
                <xsl:apply-templates select="wydzial/kierunek" />
            </body>
        </html>
</xsl:template>
<xsl:template match="kierunek">
  <h2><xsl:value-of select="./nazwa" /></h2>
  <table border="1" cellpadding="5">
        <tr>
           <th>Imie</th>
           <th>Nazwisko</th>
           <th>Rok</th>
        </tr>
        <xsl:apply-templates select="student" />
  </table>
</xsl:template>
<xsl:template match="student">
  <tr>
   <td><xsl:value-of select="imie" /></td>
   <td><xsl:value-of select="nazwisko" /></td>
   <td><xsl:value-of select="rok" /></td>
  </tr>
</xsl:template>
</xsl:stylesheet>]]>
        </code>
    </lab>
</labs>